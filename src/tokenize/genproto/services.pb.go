// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package ymotongpoo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TokenizeRequest struct {
	SourceText           string   `protobuf:"bytes,1,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenizeRequest) Reset()         { *m = TokenizeRequest{} }
func (m *TokenizeRequest) String() string { return proto.CompactTextString(m) }
func (*TokenizeRequest) ProtoMessage()    {}
func (*TokenizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_4c57ac48bf22b546, []int{0}
}
func (m *TokenizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenizeRequest.Unmarshal(m, b)
}
func (m *TokenizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenizeRequest.Marshal(b, m, deterministic)
}
func (dst *TokenizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizeRequest.Merge(dst, src)
}
func (m *TokenizeRequest) XXX_Size() int {
	return xxx_messageInfo_TokenizeRequest.Size(m)
}
func (m *TokenizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizeRequest proto.InternalMessageInfo

func (m *TokenizeRequest) GetSourceText() string {
	if m != nil {
		return m.SourceText
	}
	return ""
}

type CountRequest struct {
	Words                []string `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountRequest) Reset()         { *m = CountRequest{} }
func (m *CountRequest) String() string { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()    {}
func (*CountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_4c57ac48bf22b546, []int{1}
}
func (m *CountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountRequest.Unmarshal(m, b)
}
func (m *CountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountRequest.Marshal(b, m, deterministic)
}
func (dst *CountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountRequest.Merge(dst, src)
}
func (m *CountRequest) XXX_Size() int {
	return xxx_messageInfo_CountRequest.Size(m)
}
func (m *CountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountRequest proto.InternalMessageInfo

func (m *CountRequest) GetWords() []string {
	if m != nil {
		return m.Words
	}
	return nil
}

type ModalRequest struct {
	WordCounts           []*WordCount `protobuf:"bytes,1,rep,name=word_counts,json=wordCounts,proto3" json:"word_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ModalRequest) Reset()         { *m = ModalRequest{} }
func (m *ModalRequest) String() string { return proto.CompactTextString(m) }
func (*ModalRequest) ProtoMessage()    {}
func (*ModalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_4c57ac48bf22b546, []int{2}
}
func (m *ModalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModalRequest.Unmarshal(m, b)
}
func (m *ModalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModalRequest.Marshal(b, m, deterministic)
}
func (dst *ModalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModalRequest.Merge(dst, src)
}
func (m *ModalRequest) XXX_Size() int {
	return xxx_messageInfo_ModalRequest.Size(m)
}
func (m *ModalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModalRequest proto.InternalMessageInfo

func (m *ModalRequest) GetWordCounts() []*WordCount {
	if m != nil {
		return m.WordCounts
	}
	return nil
}

type WordCount struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WordCount) Reset()         { *m = WordCount{} }
func (m *WordCount) String() string { return proto.CompactTextString(m) }
func (*WordCount) ProtoMessage()    {}
func (*WordCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_4c57ac48bf22b546, []int{3}
}
func (m *WordCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WordCount.Unmarshal(m, b)
}
func (m *WordCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WordCount.Marshal(b, m, deterministic)
}
func (dst *WordCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordCount.Merge(dst, src)
}
func (m *WordCount) XXX_Size() int {
	return xxx_messageInfo_WordCount.Size(m)
}
func (m *WordCount) XXX_DiscardUnknown() {
	xxx_messageInfo_WordCount.DiscardUnknown(m)
}

var xxx_messageInfo_WordCount proto.InternalMessageInfo

func (m *WordCount) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *WordCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ModalResponse struct {
	WordCount            *WordCount `protobuf:"bytes,1,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ModalResponse) Reset()         { *m = ModalResponse{} }
func (m *ModalResponse) String() string { return proto.CompactTextString(m) }
func (*ModalResponse) ProtoMessage()    {}
func (*ModalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_services_4c57ac48bf22b546, []int{4}
}
func (m *ModalResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModalResponse.Unmarshal(m, b)
}
func (m *ModalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModalResponse.Marshal(b, m, deterministic)
}
func (dst *ModalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModalResponse.Merge(dst, src)
}
func (m *ModalResponse) XXX_Size() int {
	return xxx_messageInfo_ModalResponse.Size(m)
}
func (m *ModalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModalResponse proto.InternalMessageInfo

func (m *ModalResponse) GetWordCount() *WordCount {
	if m != nil {
		return m.WordCount
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenizeRequest)(nil), "ymotongpoo.TokenizeRequest")
	proto.RegisterType((*CountRequest)(nil), "ymotongpoo.CountRequest")
	proto.RegisterType((*ModalRequest)(nil), "ymotongpoo.ModalRequest")
	proto.RegisterType((*WordCount)(nil), "ymotongpoo.WordCount")
	proto.RegisterType((*ModalResponse)(nil), "ymotongpoo.ModalResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenizeServiceClient is the client API for TokenizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenizeServiceClient interface {
	Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*ModalResponse, error)
}

type tokenizeServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenizeServiceClient(cc *grpc.ClientConn) TokenizeServiceClient {
	return &tokenizeServiceClient{cc}
}

func (c *tokenizeServiceClient) Tokenize(ctx context.Context, in *TokenizeRequest, opts ...grpc.CallOption) (*ModalResponse, error) {
	out := new(ModalResponse)
	err := c.cc.Invoke(ctx, "/ymotongpoo.TokenizeService/Tokenize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenizeServiceServer is the server API for TokenizeService service.
type TokenizeServiceServer interface {
	Tokenize(context.Context, *TokenizeRequest) (*ModalResponse, error)
}

func RegisterTokenizeServiceServer(s *grpc.Server, srv TokenizeServiceServer) {
	s.RegisterService(&_TokenizeService_serviceDesc, srv)
}

func _TokenizeService_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenizeServiceServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ymotongpoo.TokenizeService/Tokenize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenizeServiceServer).Tokenize(ctx, req.(*TokenizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenizeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ymotongpoo.TokenizeService",
	HandlerType: (*TokenizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _TokenizeService_Tokenize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// CountServiceClient is the client API for CountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountServiceClient interface {
	CountWords(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*ModalResponse, error)
}

type countServiceClient struct {
	cc *grpc.ClientConn
}

func NewCountServiceClient(cc *grpc.ClientConn) CountServiceClient {
	return &countServiceClient{cc}
}

func (c *countServiceClient) CountWords(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*ModalResponse, error) {
	out := new(ModalResponse)
	err := c.cc.Invoke(ctx, "/ymotongpoo.CountService/CountWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountServiceServer is the server API for CountService service.
type CountServiceServer interface {
	CountWords(context.Context, *CountRequest) (*ModalResponse, error)
}

func RegisterCountServiceServer(s *grpc.Server, srv CountServiceServer) {
	s.RegisterService(&_CountService_serviceDesc, srv)
}

func _CountService_CountWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServiceServer).CountWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ymotongpoo.CountService/CountWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServiceServer).CountWords(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ymotongpoo.CountService",
	HandlerType: (*CountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountWords",
			Handler:    _CountService_CountWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// ModalServiceClient is the client API for ModalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModalServiceClient interface {
	FindModalWord(ctx context.Context, in *ModalRequest, opts ...grpc.CallOption) (*ModalResponse, error)
}

type modalServiceClient struct {
	cc *grpc.ClientConn
}

func NewModalServiceClient(cc *grpc.ClientConn) ModalServiceClient {
	return &modalServiceClient{cc}
}

func (c *modalServiceClient) FindModalWord(ctx context.Context, in *ModalRequest, opts ...grpc.CallOption) (*ModalResponse, error) {
	out := new(ModalResponse)
	err := c.cc.Invoke(ctx, "/ymotongpoo.ModalService/FindModalWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModalServiceServer is the server API for ModalService service.
type ModalServiceServer interface {
	FindModalWord(context.Context, *ModalRequest) (*ModalResponse, error)
}

func RegisterModalServiceServer(s *grpc.Server, srv ModalServiceServer) {
	s.RegisterService(&_ModalService_serviceDesc, srv)
}

func _ModalService_FindModalWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModalServiceServer).FindModalWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ymotongpoo.ModalService/FindModalWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModalServiceServer).FindModalWord(ctx, req.(*ModalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ymotongpoo.ModalService",
	HandlerType: (*ModalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindModalWord",
			Handler:    _ModalService_FindModalWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor_services_4c57ac48bf22b546) }

var fileDescriptor_services_4c57ac48bf22b546 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x4e, 0x83, 0x40,
	0x14, 0x85, 0x45, 0xad, 0x91, 0xdb, 0x56, 0x93, 0x89, 0x26, 0xa8, 0x0b, 0xc9, 0xc4, 0x05, 0x2b,
	0x16, 0xf8, 0xf3, 0x02, 0x55, 0x76, 0x6e, 0x68, 0x63, 0x97, 0x8d, 0xc2, 0x8d, 0x21, 0x2a, 0x17,
	0x99, 0xc1, 0x56, 0x9f, 0xde, 0xcc, 0x0c, 0x53, 0xa6, 0x26, 0x76, 0x37, 0xf7, 0xef, 0x3b, 0x27,
	0x07, 0xe0, 0x48, 0x60, 0xf3, 0x55, 0xe6, 0x28, 0xe2, 0xba, 0x21, 0x49, 0x0c, 0xbe, 0x3f, 0x48,
	0x52, 0xf5, 0x5a, 0x13, 0xf1, 0x04, 0x8e, 0x67, 0xf4, 0x86, 0x55, 0xf9, 0x83, 0x19, 0x7e, 0xb6,
	0x28, 0x24, 0xbb, 0x84, 0xa1, 0xa0, 0xb6, 0xc9, 0x71, 0x21, 0x71, 0x25, 0x03, 0x2f, 0xf4, 0x22,
	0x3f, 0x03, 0xd3, 0x9a, 0xe1, 0x4a, 0xf2, 0x2b, 0x18, 0x4d, 0xa8, 0xad, 0xa4, 0x3d, 0x38, 0x81,
	0xc1, 0x92, 0x9a, 0x42, 0x04, 0x5e, 0xb8, 0x17, 0xf9, 0x99, 0x29, 0x78, 0x0a, 0xa3, 0x47, 0x2a,
	0x9e, 0xdf, 0xed, 0xd6, 0x1d, 0x0c, 0xd5, 0x60, 0x91, 0xab, 0x53, 0xb3, 0x3b, 0x4c, 0x4e, 0xe3,
	0xde, 0x4b, 0x3c, 0xa7, 0xa6, 0x30, 0x60, 0x58, 0xda, 0xa7, 0xe0, 0xb7, 0xe0, 0xaf, 0x07, 0x8c,
	0xc1, 0xbe, 0x1a, 0x75, 0xa6, 0xf4, 0x5b, 0xc9, 0x6b, 0x66, 0xb0, 0x1b, 0x7a, 0xd1, 0x20, 0x33,
	0x05, 0x7f, 0x80, 0x71, 0x27, 0x2f, 0x6a, 0xaa, 0x04, 0xb2, 0x1b, 0x80, 0x5e, 0x5f, 0x03, 0xfe,
	0x95, 0xf7, 0xd7, 0xf2, 0xc9, 0xbc, 0xcf, 0x67, 0x6a, 0x52, 0x64, 0xf7, 0x70, 0x68, 0x5b, 0xec,
	0xc2, 0x05, 0xfc, 0x09, 0xf2, 0xfc, 0xcc, 0x1d, 0x6e, 0x98, 0xe1, 0x3b, 0xc9, 0xb4, 0x0b, 0xd1,
	0x52, 0x27, 0x00, 0xba, 0x56, 0x2e, 0x04, 0x0b, 0xdc, 0x53, 0x37, 0xec, 0xed, 0xd0, 0xa7, 0x2e,
	0x73, 0x0b, 0x4d, 0x61, 0x9c, 0x96, 0x55, 0xa1, 0x7b, 0x0a, 0xbc, 0xc9, 0x75, 0x3f, 0xcf, 0x56,
	0xee, 0xcb, 0x81, 0xfe, 0x71, 0xae, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x15, 0x3d, 0x34, 0xee,
	0x4a, 0x02, 0x00, 0x00,
}
